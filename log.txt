one day

git config --global user.name "Frank"
git config --global user.email "2369602563@qq.com"
git config --list
git config user.name
要关联一个远程仓库，先使用命令git remote add origin git@github.com:bdcncdcdvd/learning.git
是将本地仓库和远程仓库关联
关联后，使用命令git push -u origin master
之后每次提交使用git push origin master 即可。
git branch -M main//将本地的master分支改名字为main
git branch -a//查看所有的分支，包括远端的分支
git branch -r//仅查看远端分支
同步远程分支
git fetch//将本地分支与远程分支保持同步
git checkout -b note origin/note

two day 

git pull的标准格式
git pull <远程主机名> <远程分支名>：<本地分支名>
可简写为：git pull 
如果只是想放弃本地的临时提交，强制将远程仓库的代码覆盖到本地分支：
git pull --force <远程主机名> <远程分支名>：<本地分支名>
eg:git pull --force origin master:master
比如取回origin主机的next分支，与本地的master分支合并，需写成如下：
git pull origin next：master

强制覆盖远程/本地分支名
1）强制覆盖远程文件
git push origin 分支名 --force
2)强制覆盖本地文件
git fetch --all
git reset --hard origin/master
git pull

使用git clone 克隆版本库的时候，所使用的远程主机自动被Git命名为origin，
如果想使用其他的主机名，需要使用git clone命令的-o选项制定。
例如：git clone -o jQuery https://github.com/jquery/jquery.git

git remote add 添加一个新的远程Git仓库，也做主机名
git remote add内部做了什么工作？
其实是往.git/config中写了一个叫[remote "origin"]配置
如果你的Git仓库是clone下来的，Git会默认将远程仓库命名为origin
自动帮你关联上远端仓库，因此Commit之后就能提交了。
	url = git@github.com:bdcncdcdvd/learning-GIT.git
	fetch = +refs/heads/*:refs/remotes/origin/*
git remote add 的配置表示什么意思？
通多git remote add 命令，添加了一个叫作origin的远程名称
其中url参数，表示该远程名称对应的远程仓库地址
其中fetch的参数分为两部分，以：进行分割，：左边表示本地仓库文件夹
：右边表示远程仓库文件夹在本地的副本文件夹，+表示往里面添加数据的意思。
当时用git fetch origin时，Git将远程仓库下的所有分支拉取到本地ref/remote/origin目录下，
然后git merge时，它会把ref/remote/origin目录下的对应分支合并到refs/heads/目录下对应分支上。
origin究竟是什么呢？
origin就是一个别名（名称），用于指向远程仓库。
git remote add  <remote-name> <repo-address>//新增远程名称
git remote rm <remote_name>//删除已存在的远程名称（只会移除本地仓库与远程仓库的管理，不会删除远程仓库的代码）
git remote set_url <remote_name> <repo_address>//更新远程名称关联的远程仓库
git remote rename <old-remote-name> <new-remote-name>
一个本地仓库可以关联多个远程仓库

git remote show 主机名  可以查看该主机名的详细信息

远程分支
常说的[远程分支]是是远程仓库对应的分支在本地的一个副本。比如常见的origin/master、origin/develop
等都是远程分支。
可以在.git/refs/remotes/目录上看到

three day
git push origin main==git push git@github.com:tofrankie/repo-demo.git main 
git push origin serverfix解析
Git自动将serverfix分支展开为ref/heads/serverfix:refs/heads/serverfix
意味着推送本地的serverfix分支来更新远程仓库上的serverfix分支
git push origin serverfix:awesomebranch//将本地的Serverfix分支推送到远程仓库的awesomebranch上
下次其他作者从远程服务器上抓取数据时，他们会在本地生成一个远程分支origin/serverfix,指向服务器的serverfix
分支的引用：git fetch origin
注意：当抓取到新的远程跟踪分支时，本地不会自动生成一个可编辑的副本。换句话说，这种情况下，不会有一个新的
serverfix分支-只有一个不可修改的origin/serverfix指针。
可以运行git merge origin/serverfix将这些工作合并到当前所在的分支。如果想要在自己的serverfix上工作，可以
将其建立在远程跟踪分支的之上：git checkout -b serverfix origin/serverfix
这会给你一个用于工作的本地分支，并且起点位于origin/serverfix
跟踪分支
从一个远程跟踪分支检出一个本地分支会自动创建所谓的“跟踪分支”（它跟踪的分支叫作“上游分支”）
跟踪分支是与远程分支有直接联系的本地分支。如果在一个跟踪分支基础上输入git pull Git能自动识别去哪个服务器
上抓取、合并到哪个分支。
当克隆一个仓库时，它通常会自动创建一个跟踪origin/master的master分支
git branch -vv//查看设置的所有跟踪分支，这回将所有的本地分支列出来并且包含更多的信息
如每一个分支正在跟踪哪一个远程分支与本地分支是否领先、或是落后或是都有。
$ git branch -vv
  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets
  master    1ae2a45 [origin/master] deploying index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it
  testing   5ea463a trying something new
  可以看到iss53分支正在跟踪origin/iss53,并且ahead是2，意味着本地有两个提交还没有推送到服务器上
  master分支正在跟踪origin/master分支并且是最新的
  serverfix分支正在跟踪teamone服务器上的server-fix-good分支并且领先3落后1意味着领先与落后数字，需要在运行
  此命令前抓取所有的远程仓库
  可以这样做：
  git fetch --all
  git branch -vv
  注意，这些数字的值来自于你从每个服务器上最后一次抓取的数据。这个命令并没有连接服务器，他只会告诉你
  关于本地缓存的的服务器数据，如果想要统计最新的
  服务器上有一次提交还没还没有合并入同时本地还有三次提交没有推送
  testing分支没有跟踪任何远程分支
  远程跟踪分支是远程分支的状态的引用，他们是你无法移动的本地引用。进行了网络通信后，Git就会为你移动他们
  已精确反映远程分支的状态。请将他们看做是书签，这样可以提醒你该分支在远程仓库中的位置就是你最后
  一次连接到他们的位置。
  通过git fetch 拉取代码的过程：先读取.git/config文件里面的配置[remote/<remote-name>]
  ,将里面的所有远程名称对应仓库的分支下载到本地，放在.git/refs/remotes/<remote-name>目录下。
  比如git fetch origin main 会创建或更新.git/refs/remotes/origin/main的文件。注意：
  我们使用的是origin/main而不是remotes/origin/main
  有时通过命令git diff main origin/main来对比本地分支与远程分支的一些信息，才决定要不要合并。
  通过git merge或git rebase 来进行合并分支。比如git merge origin/main表示将远程分支Origin/main合并至本地分支main中。
  git fetch 不会修改本地分支的代码
  
  其实Git的分支是由一个或多个commit-ID组成的集合。通过git branch 命令创建的分支，只是对某个commit-ID的引用。
  因此，使用git branch -d 删除某个本地分支ID，也只是删除某个引用而已，并不会删除任何commit-ID 
   
  four day
  git rebase 的用法
  合理使用rebase命令可以使我们的提交历史干净、简洁！
  合并多个commit为一个完整的commit
  git rebase -i [startpoint] [endpoint]
  其中-i的意思是interactive,即弹出交互式的界面让用户编辑完成合并工作，如果不指定[endpoint]
  ,则该区间的终点默认是当前分支HEAD所指向的commit